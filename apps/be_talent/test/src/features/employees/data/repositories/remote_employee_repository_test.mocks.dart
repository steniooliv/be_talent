// Mocks generated by Mockito 5.4.5 from annotations
// in be_talent/test/src/features/employees/data/repositories/remote_employee_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:be_talent/src/core/core.dart' as _i2;
import 'package:be_talent/src/features/employees/data/services/employee_service.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHttpService_0 extends _i1.SmartFake implements _i2.HttpService {
  _FakeHttpService_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [EmployeeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockEmployeeService extends _i1.Mock implements _i3.EmployeeService {
  @override
  _i2.HttpService get http =>
      (super.noSuchMethod(
            Invocation.getter(#http),
            returnValue: _FakeHttpService_0(this, Invocation.getter(#http)),
            returnValueForMissingStub: _FakeHttpService_0(
              this,
              Invocation.getter(#http),
            ),
          )
          as _i2.HttpService);

  @override
  _i4.Future<List<_i2.Employee>> getEmployees() =>
      (super.noSuchMethod(
            Invocation.method(#getEmployees, []),
            returnValue: _i4.Future<List<_i2.Employee>>.value(<_i2.Employee>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Employee>>.value(
              <_i2.Employee>[],
            ),
          )
          as _i4.Future<List<_i2.Employee>>);
}
